from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from aiogram.utils.markdown import text, bold, italic, code, pre
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from db import sqlite_db
from keyboards import other_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, callback_query
import datetime


class FSMRegister(StatesGroup):
    chat_id = State()
    name = State()
    username = State()
    position = State()
    reg_time = State()


@dp.message_handler(commands=['start'])
async def commands_start(message: types.Message):
    try:
        await bot.send_message(message.from_user.id, text('–ü—Ä–∏–≤–µ—Ç ‚úå  \n–Ø –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º –æ—Ç–¥–µ–ª–µ –î–û–ö ü§ñ\n'
                                                     '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏ */help*'), parse_mode=ParseMode.MARKDOWN_V2)
        await message.delete()
    except:
        await message.delete()

# @dp.message_handler(commands='register', state=None)
async def start_register(message: types.Message):
    read = await sqlite_db.sql_staff_chat_id_read()
    for i in read:
        for j in i:
            if message.from_user.id == j:
                read = j
    if message.from_user.id == read:
        await bot.send_message(message.from_user.id, '–¢—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')
    else:
        await FSMRegister.name.set()
        await bot.send_message(message.from_user.id, '–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è‚úåÔ∏è\n–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –ø–æ —Ñ–∞–º–∏–ª–∏–∏, –∏–º–µ–Ω–∏ –∏ –æ—Ç—á–µ—Å—Ç–≤—É.')

# @dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ù—É –ª–∞–¥–Ω–æ')

# @dp.message_handler(state=FSMRegister.name)
async def enter_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text.title()
    await bot.send_message(message.from_user.id, str(data))
    await FSMRegister.next()
    await bot.send_message(message.from_user.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text.split()[1]}, –∞ —Ç–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, –∫–∞–∫–∞—è —É —Ç–µ–±—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ –î–û–ö–µ', reply_markup=other_kb.pos_case_button)


# @dp.message_handler(state="*")
async def enter_position(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['pos'] = callback_query.data.title()
        await FSMRegister.next()
        data['username'] = '@' + callback_query.from_user.username
        await FSMRegister.next()
        data['chat_id'] = callback_query.from_user.id
        await FSMRegister.next()
        data['reg_time'] = str(datetime.date.today())
    await bot.send_message(callback_query.from_user.id, str(data))
    await bot.send_message(callback_query.from_user.id, '–ì–æ—Ç–æ–≤–æ')
    await sqlite_db.sql_staff_add_command(state)
    await state.finish()


def register_handlers_other(dp: Dispatcher):
    dp.register_message_handler(commands_start, commands=['start'])
    dp.register_message_handler(start_register, commands='register', state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(enter_name, state=FSMRegister.name)
    dp.register_callback_query_handler(enter_position, lambda x: x.data, state="*")


