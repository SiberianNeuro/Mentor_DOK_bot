from typing import Any, Coroutine

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from db import sqlite_db
from keyboards import admin_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards import simple_cal_callback, SimpleCalendar
from datetime import datetime


admins = [323123946, 555185558, 538133074]


class FSMAdmin(StatesGroup):
    document = State()
    name = State()
    form = State()
    status = State()
    link = State()
    trainee_name = State()
    start_date = State()
    end_date = State()

"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""


# @dp.message_handler(commands=['moderator'])
async def make_changes_command(message: types.Message):
    if message.from_user.id in admins:
        await message.answer_sticker(sticker='CAACAgIAAxkBAAEEYNxiTEhxKcFmVromHC2dj4qNR5qDkAACKgMAApAAAVAglpnor2dcF6MjBA')
        await message.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –æ–±—É—á–∞—Ç–æ—Ä! ü¶æ', reply_markup=admin_kb.button_case_admin)
        await message.answer(f'–ß—Ç–æ —è —É–º–µ—é:\n\n'
                             f'üëâüèª –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–≥—Ä—É–∑–∏—Ç—å"</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–µ–¥—à–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n\n'
                             f'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–ù–∞–π—Ç–∏"</b>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö\n\n'
                             f'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–û—Ç—á–µ—Ç"</b>, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö')
        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await message.answer_sticker(sticker='CAACAgQAAxkBAAEEY_tiTYxKQPLzeCweS70kX6XWr61f6wACJQ0AAufo-wL2uHDEfdtM1iME')
        await message.answer('–¢—ã –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –æ–±—É—á–∞—Ç–æ—Ä–∞ üòë\n–ï—Å–ª–∏ —Ç—ã –∏ –ø—Ä–∞–≤–¥–∞ –æ–±—É—á–∞—Ç–æ—Ä, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø—Ä–æ–ø—É—Å–∫–æ–º –∫ @siberian_neuro')
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(-1001776821827, f'@{message.from_user.username} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–∞—Ç–æ—Ä–æ–≤.')

"""–ó–∞–ø—É—Å–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""


# @dp.message_handler(lambda message: message.text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), state=None)
async def cm_start(message: types.Message):
    if message.from_user.id in admins:
        await FSMAdmin.document.set()
        await bot.send_message(message.from_user.id,
                               '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ ü§ì\n'
                               '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"',
                               reply_markup=admin_kb.button_case_cancel)
        await bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–ø—Ä–æ—Å–∞ üìú')

"""–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""


# @dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=admin_kb.button_case_admin)

"""–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""


# @dp.message_handler(content_types=['document'], state=FSMAdmin.document)
async def load_document(message: types.Message, state: FSMContext):
    global fetcher
    fetcher = message.document.file_id
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['document'] = message.document.file_id
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –§.–ò.–û. —Å—Ç–∞–∂–µ—Ä–∞')

"""–ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–û"""


# @dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å?',
                               reply_markup=admin_kb.button_stage_full)

"""–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""


# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('–°'), state=FSMAdmin.form)
async def load_form(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in admins:
        async with state.proxy() as data:
            data['form'] = callback_query.data
        await FSMAdmin.next()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ê —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–∂–µ—Ä—É –∫–∞–∫–æ–µ?',
                               reply_markup=admin_kb.button_outcome_full)

"""–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–æ—Å–∞"""


# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è'), state=FSMAdmin.status)
async def load_status(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in admins:
        async with state.proxy() as data:
            data['status'] = callback_query.data
        await FSMAdmin.next()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ò —Å—Å—ã–ª–æ—á–∫—É –∫ –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')

"""–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —é—Ç—É–± –∏ –æ–±–µ—Ä—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""


# @dp.message_handler(state=FSMAdmin.link)
async def load_link(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['link'] = message.text
    await sqlite_db.sql_add_command(state)
    await state.finish()

    read = await sqlite_db.item_search()
    for ret in read:
        if ret[0] == fetcher:
            await bot.send_document(message.from_user.id, ret[0],\
                                    caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}',\
                                    reply_markup=admin_kb.button_case_admin)
            await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup(). \
                                   add(
                InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[-1]}')))
            await bot.send_document(-1001776821827, ret[0],
                                    caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}')


"""–í—ã–ª–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""


# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
    await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', show_alert=True)

"""–°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –æ–ø—Ä–æ—Å–æ–≤"""


# @dp.message_handler(lambda message: message.text.startswith('–ù–∞–π—Ç–∏'), state=None)
async def start_search(message: types.Message):
    if message.from_user.id in admins:
        await FSMAdmin.trainee_name.set()
        await message.reply('üëáüèº –í–≤–µ–¥–∏ –§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏', reply_markup=admin_kb.button_case_cancel)


"""–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""


# @dp.message_handler(state=FSMAdmin.trainee_name)
async def search_item(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['trainee_name'] = message.text
        read = await sqlite_db.item_search()
        read_target = [i for i in read if data['trainee_name'] in i[1]]
        if not read_target:
            await bot.send_animation(message.from_user.id, 'CgACAgQAAxkBAAIKFmJZQxoTG2PLqOk4KccHjiHWYmR3AAJpAgACKDSNUnucmCkxyK3TIwQ')
            await bot.send_message(message.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Å—Ç–∞–∂–µ—Ä–µ –Ω–µ—Ç ü§î', reply_markup=admin_kb.button_case_admin)
        else:
            for ret in read_target:
                await bot.send_document(message.from_user.id, ret[0],
                                        caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞:'
                                                f' {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:'
                                                f' {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}')
                await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup().\
                                        add(
                    InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[-1]}')))
            await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ!üëå', reply_markup=admin_kb.button_case_admin)
    await state.finish()

def report_parser(s_d: dict, e_d: dict, slice_t: list, slice_l: list, slice_d: list):
    string_t = '\n'.join(slice_t)
    string_l = '\n'.join(slice_l)
    string_d = '\n'.join(slice_d)
    outcome_string = f'–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å <b>{s_d}</b> –ø–æ <b>{e_d}</b> –±—ã–ª–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ:\n'\
                     f'\n'\
                     f'<u>{len(slice_t)} –ø–µ—Ä–µ–≤–æ–¥–∞(-–æ–≤) —Å–æ —Å—Ç–∞–∂–µ—Ä–∞ –Ω–∞ –ò.–û.:</u>\n' \
                     f'{string_t}\n'\
                     f'\n'\
                     f'<u>{len(slice_d)} –ø–µ—Ä–µ–≤–æ–¥–∞(-–æ–≤) —Å –ò.–û. –Ω–∞ –≤—Ä–∞—á–∞:</u>\n' \
                     f'{string_d}\n'\
                     f'\n'\
                     f'<u>{len(slice_l)} –ø–µ—Ä–µ–≤–æ–¥–∞(-–æ–≤) –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ L1:</u>\n' \
                     f'{string_l}\n'\
                     f'\n'\
                     f'–í—Å–µ–≥–æ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –±—ã–ª–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(slice_l) + len(slice_l) + len(slice_d)} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞(-–æ–≤) ü§©'
    return outcome_string

async def slice_report_start(message: types.Message):
    if message.from_user.id in admins:
        await FSMAdmin.start_date.set()
        await message.answer('–ù–∞—á–∏–Ω–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É —Å—Ä–µ–∑–∞ –ø–æ –æ–ø—Ä–æ—Å–∞–º', reply_markup=admin_kb.button_case_cancel)
        await message.answer('–í—ã–±–µ—Ä–∏ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É: ', reply_markup=await SimpleCalendar().start_calendar())

async def slice_report_next(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    if callback_query.from_user.id in admins:
        selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
        if selected:
            await state.update_data(start_date=date.strftime('%Y-%m-%d'))
        await callback_query.answer()
        await callback_query.message.delete()
        await state.reset_state(with_data=False)
        await callback_query.message.answer('–í—ã–±–µ—Ä–∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É: ',
                                                reply_markup=await SimpleCalendar().start_calendar())

async def slice_report_final(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    if callback_query.from_user.id in admins:
        selected, date = await SimpleCalendar().process_selection(callback_query, callback_data)
        if selected:
            await FSMAdmin.end_date.set()
            await state.update_data(end_date=date.strftime("%Y-%m-%d"))
        await callback_query.message.delete()
        await state.reset_state(with_data=False)
        slice_report_data = await state.get_data()
        slice_report_trainee = [i[0] for i in await sqlite_db.sql_report_trainee(slice_report_data['start_date'], slice_report_data['end_date'])]
        slice_report_l1 = [i[0] for i in await sqlite_db.sql_report_l1(slice_report_data['start_date'], slice_report_data['end_date'])]
        slice_report_doc = [i[0] for i in await sqlite_db.sql_report_doc(slice_report_data['start_date'], slice_report_data['end_date'])]
        await callback_query.message.answer(report_parser(slice_report_data['start_date'], slice_report_data['end_date'],
                                                          slice_report_trainee, slice_report_l1, slice_report_doc), reply_markup=admin_kb.button_case_admin)



def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(make_changes_command, commands=['moderator'])
    dp.register_message_handler(cm_start, lambda message: message.text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–û—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_document, content_types=['document'], state=FSMAdmin.document)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_callback_query_handler(load_form, lambda x: x.data and x.data.startswith('–°'), state=FSMAdmin.form)
    dp.register_callback_query_handler(load_status, lambda x: x.data and x.data.startswith('–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è'), state=FSMAdmin.status)
    dp.register_message_handler(load_link, state=FSMAdmin.link)
    dp.register_callback_query_handler(del_callback_run, lambda x: x.data and x.data.startswith('del '))
    dp.register_message_handler(start_search, lambda message: message.text.startswith('–ù–∞–π—Ç–∏'), state=None)
    dp.register_message_handler(search_item, state=FSMAdmin.trainee_name)
    dp.register_message_handler(slice_report_start, lambda message: message.text.startswith('–û—Ç—á–µ—Ç'), state=None)
    dp.register_callback_query_handler(slice_report_next, simple_cal_callback.filter(), state=FSMAdmin.start_date)
    dp.register_callback_query_handler(slice_report_final, simple_cal_callback.filter())