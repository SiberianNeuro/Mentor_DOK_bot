from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from aiogram.utils.markdown import text, bold, italic, code, pre
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from db import sqlite_db
from db.sqlite_db import sql_add_command
from keyboards import admin_kb
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, callback_query

admins = ['siberian_neuro', 'marioneto44ka']
overlords = ['siberian_neuro']

class FSMAdmin(StatesGroup):
    document = State()
    name = State()
    form = State()
    status = State()
    link = State()
    trainee_name = State()
    mentor_username = State()

"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""
# @dp.message_handler(commands=['moderator'])
async def make_changes_command(message: types.Message):
    global ID
    if message.from_user.username in admins:
        await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEEYNxiTEhxKcFmVromHC2dj4qNR5qDkAACKgMAApAAAVAglpnor2dcF6MjBA')
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –æ–±—É—á–∞—Ç–æ—Ä! ü¶æ', reply_markup=admin_kb.button_case_admin)
        await bot.send_message(message.from_user.id, text('–ß—Ç–æ —è —É–º–µ—é:', 'üëâüèª –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ó–∞–≥—Ä—É–∑–∏—Ç—å"*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–µ–¥—à–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n',
                                                      'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *"–ù–∞–π—Ç–∏"*, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö', sep='\n'), parse_mode=ParseMode.MARKDOWN_V2)
        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await bot.send_sticker(message.from_user.id, sticker='CAACAgQAAxkBAAEEY_tiTYxKQPLzeCweS70kX6XWr61f6wACJQ0AAufo-wL2uHDEfdtM1iME')
        await bot.send_message(message.from_user.id, '–¢—ã –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –æ–±—É—á–∞—Ç–æ—Ä–∞ üòë\n–ï—Å–ª–∏ —Ç—ã –∏ –ø—Ä–∞–≤–¥–∞ –æ–±—É—á–∞—Ç–æ—Ä, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø—Ä–æ–ø—É—Å–∫–æ–º –∫ @siberian_neuro')
        await bot.delete_message(message.chat.id, message.message_id)

"""–ó–∞–ø—É—Å–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
# @dp.message_handler(lambda message: message.text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), state=None)
async def cm_start(message : types.Message):
    if message.from_user.username in admins:
        await FSMAdmin.document.set()
        await bot.send_message(message.from_user.id, '–ù–∞—á–Ω–µ–º —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –∑–∞–≥—Ä—É–∑–∏ –µ–≥–æ')

"""–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
# @dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ù—É –ª–∞–¥–Ω–æ')

"""–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
# @dp.message_handler(content_types=['document'], state=FSMAdmin.document)
async def load_document(message: types.Message, state: FSMContext):
    global fetcher
    fetcher = message.document.file_id
    if message.from_user.username in admins:
        async with state.proxy() as data:
            data['document'] = message.document.file_id
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –§.–ò.–û. —Å—Ç–∞–∂–µ—Ä–∞')

"""–ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–û"""
# @dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.username in admins:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å?', reply_markup=InlineKeyboardMarkup().\
                add(InlineKeyboardButton(f'üü° –ù–∞ –ò.–û.', callback_data=f'–°–æ —Å—Ç–∞–∂–µ—Ä–∞ –Ω–∞ –ò.–û.')).\
                    add(InlineKeyboardButton(f'üî¥ –ù–∞ –≤—Ä–∞—á–∞', callback_data='–° –ò.–û. –Ω–∞ –≤—Ä–∞—á–∞')).add(InlineKeyboardButton(f'üü¢ –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø–æ–º–æ—â–Ω–∏–∫–∞', callback_data='–°–æ —Å—Ç–∞–∂–µ—Ä–∞ L1 –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞')))

"""–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""
# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('–°'), state=FSMAdmin.form)
async def load_form(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.username in admins:
        async with state.proxy() as data:
            data['form'] = callback_query.data
        await FSMAdmin.next()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ê —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–∂–µ—Ä—É –∫–∞–∫–æ–µ?', reply_markup=InlineKeyboardMarkup().\
                add(InlineKeyboardButton(f'üòè –ü—Ä–æ—à–µ–ª', callback_data=f'–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ')).\
                    add(InlineKeyboardButton(f'üòí –ù–µ –ø—Ä–æ—à–µ–ª', callback_data='–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚ùå')))

"""–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–æ—Å–∞"""
# @dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è'), state=FSMAdmin.status)
async def load_status(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.username in admins:
        async with state.proxy() as data:
            data['status'] = callback_query.data
        await FSMAdmin.next()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ò —Å—Å—ã–ª–æ—á–∫—É –∫ –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')

"""–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —é—Ç—É–± –∏ –æ–±–µ—Ä—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""
# @dp.message_handler(state=FSMAdmin.link)
async def load_link(message: types.Message, state: FSMContext):
    if message.from_user.username in admins:
        async with state.proxy() as data:
            data['link'] = message.text

        # async with state.proxy() as data:
        #     await message.reply(str(data))

    await sqlite_db.sql_add_command(state)
    await state.finish()

    read = await sqlite_db.sql_read2()
    for ret in read:
        if ret[0] == fetcher:
            # await bot.send_message(message.from_user.id, f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-1]}')
            await bot.send_document(message.from_user.id, ret[0], caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-1]}')
            await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup(). \
                                   add(
                InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[1]}')))

"""–í—ã–ª–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
    await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', show_alert=True)

"""–ö–æ–º–∞–Ω–¥–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
@dp.message_handler(commands='–£–¥–∞–ª–∏—Ç—å')
async def delete_item(message: types.Message):
    if message.from_user.username in admins:
        read = await sqlite_db.sql_read2()
        for ret in read:
            await bot.send_document(message.from_user.id, ret[0], caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-1]}')
            await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup().\
                                   add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[1]}')))


"""–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –æ–ø—Ä–æ—Å–æ–≤"""

# class FSMFinder(StatesGroup):
#     trainee_name = State()


@dp.message_handler(lambda message: message.text.startswith('–ù–∞–π—Ç–∏'), state=None)
async def start_search(message: types.Message):
    if message.from_user.username in admins:
        await FSMAdmin.trainee_name.set()
        await message.reply('üëáüèº –í–≤–µ–¥–∏ –§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏')

"""–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ù—É –ª–∞–¥–Ω–æ')

@dp.message_handler(state=FSMAdmin.trainee_name)
async def search_item(message: types.Message, state: FSMContext):
    if message.from_user.username in admins:
        async with state.proxy() as data:
            data['trainee_name'] = message.text
        read = await sqlite_db.sql_read2()
        read_target = [i for i in read if data['trainee_name'] in i[1]]
        if read_target == []:
            await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEEYONiTEoilaz930YnqFCJ1mOkt2X6SAACZwEAApAAAVAgds06eQ0IVqsjBA')
            await bot.send_message(message.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Å—Ç–∞–∂–µ—Ä–µ –Ω–µ—Ç')
        else:
            await bot.send_sticker(message.from_user.id, sticker='CAACAgIAAxkBAAEEYOViTEpbkiPvnanRvTsdFgIng2RQUQACkwADkAABUCCcUa2lgOTMGCME')
            for ret in read_target:
                await bot.send_document(message.from_user.id, ret[0],
                                        caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-1]}')
                await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup(). \
                                        add(
                    InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[1]}')))
    await state.finish()

# class FSMMentor(StatesGroup):
#     mentor = State()

@dp.message_handler(commands=['–î–æ–±–∞–≤–∏—Ç—å_–æ–±—É—á–∞—Ç–æ—Ä–∞'], state=None)
async def add_mentor(message: types.Message):
    if message.from_user.username in overlords:
        await FSMAdmin.mentor_username.set()
        await message.reply('–õ–∏–Ω–∫–∞–Ω–∏ —é–∑–µ—Ä–Ω–µ–π–º –Ω–æ–≤–æ–≥–æ –æ–±—É—á–∞—Ç–æ—Ä–∞')

@dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ù—É –ª–∞–¥–Ω–æ')

@dp.message_handler(state=FSMAdmin.mentor_username)
async def append_mentor_username(message: types.Message, state: FSMContext):
    if message.from_user.username in overlords:
        async with state.proxy() as data:
            data['mentor_name'] = message.text[1:]
        admins.append(data['mentor_name'])
        await message.reply('–û–±—É—á–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
        await state.finish()






def register_handlers_admin(dp : Dispatcher):
    dp.register_message_handler(make_changes_command, commands=['moderator'])
    dp.register_message_handler(cm_start, lambda message: message.text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–æ—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_document, content_types=['document'], state=FSMAdmin.document)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_callback_query_handler(load_form, lambda x: x.data and x.data.startswith('–°'), state=FSMAdmin.form)
    dp.register_callback_query_handler(load_status, lambda x: x.data and x.data.startswith('–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è'), state=FSMAdmin.status)
    dp.register_message_handler(load_link, state=FSMAdmin.link)
    # dp.register_callback_query_handler(del_callback_run, lambda x: x.data and x.data.startswith('del '))
    # dp.message_handler(delete_item, commands=['–£–¥–∞–ª–∏—Ç—å'])
