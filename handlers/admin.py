from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram import types, Dispatcher
from aiogram.types import ParseMode
from aiogram.utils.markdown import text, bold, italic, code, pre
from create_bot import dp, bot
from aiogram.dispatcher.filters import Text
from db import sqlite_db
from db.sqlite_db import sql_add_command
from keyboards import admin_kb
from keyboards.admin_kb import get_format_keyboard, get_status_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, callback_query
import datetime

admins = [323123946, 555185558, 538133074,]


class FSMAdmin(StatesGroup):
    document = State()
    name = State()
    form = State()
    status = State()
    link = State()
    date = State()
    trainee_name = State()
    mentor_username = State()


"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞"""


@dp.message_handler(commands=['moderator'])
async def make_changes_command(message: types.Message):
    if message.from_user.id in admins:
        await bot.send_sticker(message.from_user.id,
                               sticker='CAACAgIAAxkBAAEEYNxiTEhxKcFmVromHC2dj4qNR5qDkAACKgMAApAAAVAglpnor2dcF6MjBA')
        await bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –æ–±—É—á–∞—Ç–æ—Ä! ü¶æ',
                               reply_markup=admin_kb.button_case_admin)
        await bot.send_message(message.from_user.id, text('–ß—Ç–æ —è —É–º–µ—é:',
                                                          'üëâüèª –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ó–∞–≥—Ä—É–∑–∏—Ç—å"*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–µ–¥—à–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n',
                                                          'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *"–ù–∞–π—Ç–∏"*, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö',
                                                          sep='\n'), parse_mode=ParseMode.MARKDOWN_V2)
        await bot.delete_message(message.chat.id, message.message_id)
    else:
        await bot.send_sticker(message.from_user.id,
                               sticker='CAACAgQAAxkBAAEEY_tiTYxKQPLzeCweS70kX6XWr61f6wACJQ0AAufo-wL2uHDEfdtM1iME')
        await bot.send_message(message.from_user.id,
                               '–¢—ã –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –æ–±—É—á–∞—Ç–æ—Ä–∞ üòë\n–ï—Å–ª–∏ —Ç—ã –∏ –ø—Ä–∞–≤–¥–∞ –æ–±—É—á–∞—Ç–æ—Ä, –æ–±—Ä–∞—Ç–∏—Å—å –∑–∞ –ø—Ä–æ–ø—É—Å–∫–æ–º –∫ @siberian_neuro')
        await bot.delete_message(message.chat.id, message.message_id)
        await bot.send_message(-1001776821827,
                               f'@{message.from_user.username} —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–∞—Ç–æ—Ä–æ–≤.')


"""–ó–∞–ø—É—Å–∫ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""


@dp.message_handler(lambda message: message.text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), state=None)
async def cm_start(message: types.Message):
    if message.from_user.id in admins:
        await FSMAdmin.document.set()
        await bot.send_message(message.from_user.id,
                               '–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ ü§ì\n'
                               '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"',
                               reply_markup=admin_kb.button_case_cancel)
        await bot.send_message(message.from_user.id, '–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–ø—Ä–æ—Å–∞ üìú')


"""–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""


@dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=admin_kb.button_case_admin)


"""–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""


@dp.message_handler(content_types=['document'], state=FSMAdmin.document)
async def load_document(message: types.Message, state: FSMContext):
    global fetcher
    fetcher = message.document.file_id
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['document'] = message.document.file_id
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, '–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –§.–ò.–û. —Å—Ç–∞–∂–µ—Ä–∞')


"""–ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–û"""


@dp.message_handler(state=FSMAdmin.name)
async def load_name(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await bot.send_message(message.from_user.id, '–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏–ª –æ–ø—Ä–æ—Å?',
                               reply_markup=get_format_keyboard())


"""–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞"""


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('format'), state=FSMAdmin.form)
async def load_form(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in admins:
        async with state.proxy() as data:
            data['form'] = callback_query.data.replace("format: ", "")
        await FSMAdmin.next()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ê —Ä–µ—à–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–∂–µ—Ä—É –∫–∞–∫–æ–µ?',
                               reply_markup=get_status_keyboard())


"""–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ä–æ—Å–∞"""


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è'), state=FSMAdmin.status)
async def load_status(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.from_user.id in admins:
        async with state.proxy() as data:
            data['status'] = callback_query.data
        await FSMAdmin.next()
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, '–ò —Å—Å—ã–ª–æ—á–∫—É –∫ –≤–∏–¥–µ–æ –Ω–∞ —é—Ç—É–±, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')


"""–í–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –Ω–∞ —é—Ç—É–± –∏ –æ–±–µ—Ä—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞"""


@dp.message_handler(state=FSMAdmin.link)
async def load_link(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['link'] = message.text
        await FSMAdmin.next()
        async with state.proxy() as data:
            data['date'] = str(datetime.date.today())
    await sqlite_db.sql_add_command(state)
    await state.finish()

    read = await sqlite_db.item_search()
    for ret in read:
        if ret[0] == fetcher:
            # –û—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—É—á–∞—Ç–æ—Ä—É
            await bot.send_document(
                message.from_user.id, ret[0],
                caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}',
                reply_markup=admin_kb.button_case_admin
            )
            await bot.send_message(
                message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[-1]}')
                )
            )
            # –ï—Å–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∫ –î–∞—à–µ –®–∫—Ä–µ–¥
            if ret[3] == '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ' and ret[2] not in ['–û–ø—Ä–æ—Å 4-–≥–æ –¥–Ω—è', '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å']:
                await bot.send_document(
                    -781832035, ret[0],
                    caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}'
                )
                await bot.send_document(
                    -1001776821827, ret[0],
                    caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}'
                )
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç "–ª–æ–≥–∏ –±–æ—Ç–∞ –æ–±—É—á–∞—Ç–æ—Ä–æ–≤" –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
            await bot.send_document(
                -1001776821827, ret[0],
                caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}'
            )


# """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""
#
#
# @dp.message_handler(commands='–£–¥–∞–ª–∏—Ç—å')
# async def delete_item(message: types.Message):
#     if message.from_user.id in admins:
#         read = await sqlite_db.sql_read2()
#         for ret in read:
#             await bot.send_document(message.from_user.id, ret[0], caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-1]}')
#             await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup().\
#                                    add(InlineKeyboardButton(f'–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[1]}')))

"""–í—ã–ª–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏"""


@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run(callback_query: types.CallbackQuery):
    await sqlite_db.sql_delete_command(callback_query.data.replace('del ', ''))
    await callback_query.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', show_alert=True)


"""–°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –æ–ø—Ä–æ—Å–æ–≤"""


@dp.message_handler(lambda message: message.text.startswith('–ù–∞–π—Ç–∏'), state=None)
async def start_search(message: types.Message):
    if message.from_user.id in admins:
        # await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞', reply_markup=admin_kb.search_button_case)
        await message.reply('üëáüèº –í–≤–µ–¥–∏ –§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏',
                            reply_markup=admin_kb.button_case_cancel)
        await FSMAdmin.trainee_name.set()


@dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await message.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=admin_kb.button_case_admin)


"""–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""


@dp.message_handler(state=FSMAdmin.trainee_name)
async def search_item(message: types.Message, state: FSMContext):
    if message.from_user.id in admins:
        async with state.proxy() as data:
            data['trainee_name'] = message.text
        read = await sqlite_db.item_search()
        read_target = [i for i in read if data['trainee_name'] in i[1]]
        if not read_target:
            await bot.send_animation(message.from_user.id,
                                     'CgACAgQAAxkBAAIKFmJZQxoTG2PLqOk4KccHjiHWYmR3AAJpAgACKDSNUnucmCkxyK3TIwQ')
            await bot.send_message(message.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Å—Ç–∞–∂–µ—Ä–µ –Ω–µ—Ç ü§î',
                                   reply_markup=admin_kb.button_case_admin)
        else:
            for ret in read_target:
                await bot.send_document(message.from_user.id, ret[0],
                                        caption=f'{ret[1]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞:'
                                                f' {ret[2]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:'
                                                f' {ret[3]}\n–°—Å—ã–ª–∫–∞ YT: {ret[-3]}')
                await bot.send_message(message.from_user.id, text='–û–ø—Ü–∏–∏:', reply_markup=InlineKeyboardMarkup(). \
                                       add(
                    InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏', callback_data=f'del {ret[-1]}')))
            await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ!üëå', reply_markup=admin_kb.button_case_admin)
    await state.finish()


"""–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—É—á–∞—Ç–æ—Ä–∞"""


# @dp.message_handler(commands=['–î–æ–±–∞–≤–∏—Ç—å_–æ–±—É—á–∞—Ç–æ—Ä–∞'], state=None)
# async def add_mentor(message: types.Message):
#     if message.from_user.id in overlords:
#         await FSMAdmin.mentor_username.set()
#         await message.reply('–õ–∏–Ω–∫–∞–Ω–∏ —é–∑–µ—Ä–Ω–µ–π–º –Ω–æ–≤–æ–≥–æ –æ–±—É—á–∞—Ç–æ—Ä–∞')
#
#
# @dp.message_handler(state='*', commands='–æ—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
# async def cancel_handler(message: types.Message, state: FSMContext):
#     current_state = await state.get_state()
#     if current_state is None:
#         return
#     await state.finish()
#     await message.reply('–ù—É –ª–∞–¥–Ω–æ')
#
#
# @dp.message_handler(state=FSMAdmin.mentor_username)
# async def append_mentor_username(message: types.Message, state: FSMContext):
#     if message.from_user.id in overlords:
#         async with state.proxy() as data:
#             data['mentor_name'] = message.text[1:]
#         admins.append(data['mentor_name'])
#         await message.reply('–û–±—É—á–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω')
#         await state.finish()


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(make_changes_command, commands=['moderator'])
    dp.register_message_handler(cm_start, lambda message: message.text.startswith('–ó–∞–≥—Ä—É–∑–∏—Ç—å'), state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–û—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(load_document, content_types=['document'], state=FSMAdmin.document)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_callback_query_handler(load_form, lambda x: x.data and x.data.startswith('–°'), state=FSMAdmin.form)
    dp.register_callback_query_handler(load_status, lambda x: x.data and x.data.startswith('–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è'),
                                       state=FSMAdmin.status)
    dp.register_message_handler(load_link, state=FSMAdmin.link)
    dp.register_callback_query_handler(del_callback_run, lambda x: x.data and x.data.startswith('del '))
    dp.register_message_handler(start_search, lambda message: message.text.startswith('–ù–∞–π—Ç–∏'), state=None)
    dp.register_message_handler(cancel_handler, state='*', commands='–û—Ç–º–µ–Ω–∞')
    dp.register_message_handler(cancel_handler, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(search_item, state=FSMAdmin.trainee_name)
