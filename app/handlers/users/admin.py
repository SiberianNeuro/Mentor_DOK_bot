from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher

from loader import dp, bot

from app.filters.admin import IsAdmin
from app.db import mysql_db
from app.keyboards import admin_kb
from app.keyboards.admin_kb import get_format_keyboard, get_status_keyboard, exam_callback, get_delete_button
from app.utils.misc.states import FSMAdmin


# –ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É
# @dp.message_handler(IsAdmin(), commands=['moderator'], state="*")
async def admin_start(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –æ–±—É—á–∞—Ç–æ—Ä! ü¶æ\n\n'
                    f'–ß—Ç–æ —è —É–º–µ—é:\n\n'
                    f'üëâüèª –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–ó–∞–≥—Ä—É–∑–∏—Ç—å"</b>, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—à–µ–¥—à–µ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏\n'
                    f'üëâüèª –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–ù–∞–π—Ç–∏"</b>, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è—Ö',
                    reply_markup=admin_kb.button_case_admin)
    await m.delete()

"""–ó–∞–≥—Ä—É–∑–∫–∞ –æ–ø—Ä–æ—Å–∞"""


# –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ä–æ—Å–∞: –¥–æ–∫—É–º–µ–Ω—Ç
# @dp.message_handler(IsAdmin(), text="–ó–∞–≥—Ä—É–∑–∏—Ç—å", state=None)
async def exam_start(m: types.Message):
    await FSMAdmin.document.set()
    await m.answer('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ ü§ì\n'
                   '–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É <b>"–û—Ç–º–µ–Ω–∞"</b> –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /moderator',
                   reply_markup=admin_kb.button_case_cancel
                   )
    await m.answer('–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –º–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –æ–ø—Ä–æ—Å–∞ üìú')


# –û—Ç–º–µ–Ω—è—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä
# @dp.message_handler(state='*', commands='–û—Ç–º–µ–Ω–∞')
# @dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler_admin(m: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.finish()
    await m.reply('–ü—Ä–∏–Ω—è—Ç–æ üëå', reply_markup=admin_kb.button_case_admin)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –§–ò–û
# @dp.message_handler(IsAdmin(), content_types=['document'], state=FSMAdmin.document)
async def load_document(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['document'] = m.document.file_id
    await FSMAdmin.next()
    await m.answer('–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –§–ò–û —Å—Ç–∞–∂–µ—Ä–∞ <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π</b>\n\n'
                   '<i>–ù–∞–ø—Ä–∏–º–µ—Ä: –®–∞—Ä–∫–æ–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞</i>')

# –ó–∞–≥—Ä—É–∑–∫–∞ –§–ò–û, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞
# @dp.message_handler(IsAdmin(), state=FSMAdmin.name)
async def load_name(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = m.text.title()
    await FSMAdmin.next()
    await m.answer('–î–∞–ª—å—à–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø—Ä–æ—Å–∞.\n\n'
                   '–û—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏ <b>–∫–ª–∏–∫–Ω–∏</b> –Ω–∞ –Ω–µ–≥–æ.',
                   reply_markup=get_format_keyboard()
                   )

# –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –∏—Ç–æ–≥–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
# @dp.callback_query_handler(IsAdmin(), exam_callback.filter(action='format'), state=FSMAdmin.form)
async def load_form(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    async with state.proxy() as data:
        data['form'] = callback_data.get("action_data")
    await FSMAdmin.next()
    await c.answer()
    await c.message.answer('–ó–¥–æ—Ä–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –ø—Ä–æ—à–µ–ª –ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –æ–ø—Ä–æ—Å:',
                           reply_markup=get_status_keyboard())


# –í—ã–±–æ—Ä –∏—Ç–æ–≥–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Å—ã–ª–∫–∏
# @dp.callback_query_handler(IsAdmin(), exam_callback.filter(action='status'), state=FSMAdmin.status)
async def load_status(c: types.CallbackQuery, state: FSMContext, callback_data: dict):
    async with state.proxy() as data:
        data['status'] = callback_data.get("action_data")
        if data['status'] == '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ ‚ùå':
            await c.message.answer('–ö–∞–∫–∞—è –Ω–µ–∑–∞–¥–∞—á–∞ üòî\n\n–ü–æ–∂–µ–ª–∞–µ–º –µ–º—É —É–¥–∞—á–∏ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ :)')
        else:
            await c.message.answer('–ï—â–µ –æ–¥–Ω–∞ —É—Å–ø–µ—à–Ω–∞—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è üòé\n\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —É–º–Ω–∏—á–∫—É üôÉ')
    await FSMAdmin.next()
    await c.answer()
    await c.message.answer('–ú—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube, —Å–∫–æ–ø–∏—Ä—É–π –µ—ë –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ')


# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–∫–∏, –æ–±—ë—Ä—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏
# @dp.message_handler(IsAdmin(), state=FSMAdmin.link)
async def load_link(m: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['link'] = m.text
    await mysql_db.sql_add_command(state)
    read = await mysql_db.item_search(data["document"])
    for ret in read:
        # –û—Ç–≤–µ—Ç –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—É—á–∞—Ç–æ—Ä—É
        await bot.send_document(
            m.from_user.id, ret[1],
            caption=f'<b>{ret[2]}</b>\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[3]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[4]}\n–°—Å—ã–ª–∫–∞ YT: {ret[5]}',
            reply_markup=get_delete_button(ret[0])
        )
        await m.answer('–ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏, –º—ã –º–æ–ª–æ–¥—Ü—ã üëå', reply_markup=admin_kb.button_case_admin)
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –æ–¥–æ–±—Ä–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç –∫ –î–∞—à–µ –®–∫—Ä–µ–¥
        # if ret[4] == '–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ ‚úÖ' and ret[3] not in ['–û–ø—Ä–æ—Å 4-–≥–æ –¥–Ω—è', '–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –æ–ø—Ä–æ—Å']:
        #     await bot.send_document(
        #         -781832035, ret[1],
        #         caption=f'{ret[2]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[3]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[4]}\n–°—Å—ã–ª–∫–∞ YT: {ret[5]}'
        #     )
        # # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç "–ª–æ–≥–∏ –±–æ—Ç–∞ –æ–±—É—á–∞—Ç–æ—Ä–æ–≤" –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
        # await bot.send_document(
        #     -1001776821827, ret[1],
        #     caption=f'{ret[2]}\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞: {ret[3]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏: {ret[4]}\n–°—Å—ã–ª–∫–∞ YT: {ret[5]}'
        # )
    await state.finish()


# –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
# @dp.callback_query_handler(IsAdmin(), exam_callback.filter(action='delete'))
async def del_callback_run(c: types.CallbackQuery, callback_data: dict):
    await mysql_db.sql_delete_command(callback_data.get("action_data"))
    await c.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', show_alert=True)
    await c.message.delete()


"""–°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –±–∞–∑–µ –æ–ø—Ä–æ—Å–æ–≤"""

# –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞: –∑–∞–ø—Ä–æ—Å –§–ò–û
# @dp.message_handler(IsAdmin(), text='–ù–∞–π—Ç–∏', state=None)
async def start_search(message: types.Message):
    # await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞', reply_markup=admin_kb.search_button_case)
    await message.reply('üëáüèº –í–≤–µ–¥–∏ –§.–ò.–û. —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏',
                            reply_markup=admin_kb.button_case_cancel)
    await FSMAdmin.trainee_name.set()


# –ü–æ–∏—Å–∫ –§–ò–û –ø–æ –ë–î, –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# @dp.message_handler(IsAdmin(), state=FSMAdmin.trainee_name)
async def search_item(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['trainee_name'] = message.text.title()
    read = await mysql_db.name_search(data['trainee_name'])
    if not read:
        await bot.send_message(message.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ—Ç ü§î',
                                   reply_markup=admin_kb.button_case_admin)
    else:
        for ret in read:
            await bot.send_document(
                message.from_user.id, ret[1],
                caption=f'<b>{ret[2]}</b>\n–§–æ—Ä–º–∞—Ç –æ–ø—Ä–æ—Å–∞:'
                        f' {ret[3]}\n–°—Ç–∞—Ç—É—Å –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏:'
                        f' {ret[4]}\n–°—Å—ã–ª–∫–∞ YT: {ret[5]}',
                reply_markup=get_delete_button(ret[0])
            )
        await bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ!üëå', reply_markup=admin_kb.button_case_admin)
    await state.finish()


def register_handlers_admin(dp: Dispatcher):
    dp.register_message_handler(admin_start, IsAdmin(), commands=['moderator'], state="*")
    dp.register_message_handler(cancel_handler_admin, IsAdmin(), commands='–û—Ç–º–µ–Ω–∞', state="*")
    dp.register_message_handler(cancel_handler_admin, IsAdmin(), Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(exam_start, IsAdmin(), text='–ó–∞–≥—Ä—É–∑–∏—Ç—å', state=None)
    dp.register_message_handler(load_document, IsAdmin(), content_types=['document'], state=FSMAdmin.document)
    dp.register_message_handler(load_name, IsAdmin(), state=FSMAdmin.name)
    dp.register_callback_query_handler(load_form, IsAdmin(), exam_callback.filter(action='format'), state=FSMAdmin.form)
    dp.register_callback_query_handler(load_status, IsAdmin(), exam_callback.filter(action='status'), state=FSMAdmin.status)
    dp.register_message_handler(load_link, IsAdmin(), state=FSMAdmin.link)
    dp.register_callback_query_handler(del_callback_run, IsAdmin(), exam_callback.filter(action='delete'))
    dp.register_message_handler(start_search, IsAdmin(), text='–ù–∞–π—Ç–∏', state=None)
    dp.register_message_handler(search_item, IsAdmin(), state=FSMAdmin.trainee_name)
